import heapq

def manhattan(state):
    dist = 0
    for i, v in enumerate(state):
        if v == 0: continue
        x1, y1 = divmod(i, 3)
        x2, y2 = divmod(v-1, 3)
        dist += abs(x1 - x2) + abs(y1 - y2)
    return dist

def neighbors(state):
    zero = state.index(0)
    x, y = divmod(zero, 3)
    for dx, dy in [(-1,0),(1,0),(0,-1),(0,1)]:
        nx, ny = x+dx, y+dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            nzero = nx*3+ny
            new_state = list(state)
            new_state[zero], new_state[nzero] = new_state[nzero], new_state[zero]
            yield tuple(new_state)

def solve(start):
    start = tuple(start)
    goal = tuple(range(1,9)) + (0,)
    heap = [(manhattan(start), 0, start, [])]
    visited = set()
    while heap:
        f, g, state, path = heapq.heappop(heap)
        if state == goal:
            return path + [state]
        if state in visited:
            continue
        visited.add(state)
        for n in neighbors(state):
            if n not in visited:
                heapq.heappush(heap, (g+1+manhattan(n), g+1, n, path + [state]))

start = [1, 2, 3, 4, 0, 6, 7, 5, 8]
solution = solve(start)
for step in solution:
    print(step[0:3])
    print(step[3:6])
    print(step[6:9])
    print()
